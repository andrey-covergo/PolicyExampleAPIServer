//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace PolicyExampleAPI
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IPolicyController
    {
        /// <summary>Get policies</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyState>> PolicyGetAsync();
    
        /// <summary>Create policy</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<string> PolicyPostAsync();
    
        /// <summary>Get policy details</summary>
        /// <param name="policyId">id of the policy for the operation</param>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<PolicyState> PolicyGetAsync(string policyId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class PolicyController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IPolicyController _implementation;
    
        public PolicyController(IPolicyController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Get policies</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyState>> PolicyGet()
        {
            return _implementation.PolicyGetAsync();
        }
    
        /// <summary>Create policy</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("policy")]
        public System.Threading.Tasks.Task<string> PolicyPost()
        {
            return _implementation.PolicyPostAsync();
        }
    
        /// <summary>Get policy details</summary>
        /// <param name="policyId">id of the policy for the operation</param>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}")]
        public System.Threading.Tasks.Task<PolicyState> PolicyGet(string policyId)
        {
            return _implementation.PolicyGetAsync(policyId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IIssuanceController
    {
        /// <summary>Get issuance requests</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> IssuanceGetAsync(string policyId);
    
        /// <summary>Create issuance request</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<RequestStatus> IssuancePostAsync(IssuanceRequest body, string policyId);
    
        /// <summary>Get issuance request details</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<RequestStatus> IssuanceGetAsync(string policyId, string issuanceId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class IssuanceController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IIssuanceController _implementation;
    
        public IssuanceController(IIssuanceController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Get issuance requests</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/issuance")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous>> IssuanceGet(string policyId)
        {
            return _implementation.IssuanceGetAsync(policyId);
        }
    
        /// <summary>Create issuance request</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/issuance")]
        public System.Threading.Tasks.Task<RequestStatus> IssuancePost([Microsoft.AspNetCore.Mvc.FromBody] IssuanceRequest body, string policyId)
        {
            return _implementation.IssuancePostAsync(body, policyId);
        }
    
        /// <summary>Get issuance request details</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/issuance/{issuanceId}")]
        public System.Threading.Tasks.Task<RequestStatus> IssuanceGet(string policyId, string issuanceId)
        {
            return _implementation.IssuanceGetAsync(policyId, issuanceId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IConfigurationController
    {
        /// <summary>Get policy configurations</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> ConfigurationsGetAsync(string policyId);
    
        /// <summary>Create policy configuration</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<RequestStatus> ConfigurationsPostAsync(Configuration body, string policyId);
    
        /// <summary>Get policy configuration details</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<RequestStatus> ConfigurationsGetAsync(string policyId, string configurationId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ConfigurationController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IConfigurationController _implementation;
    
        public ConfigurationController(IConfigurationController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Get policy configurations</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/configurations")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Anonymous2>> ConfigurationsGet(string policyId)
        {
            return _implementation.ConfigurationsGetAsync(policyId);
        }
    
        /// <summary>Create policy configuration</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/configurations")]
        public System.Threading.Tasks.Task<RequestStatus> ConfigurationsPost([Microsoft.AspNetCore.Mvc.FromBody] Configuration body, string policyId)
        {
            return _implementation.ConfigurationsPostAsync(body, policyId);
        }
    
        /// <summary>Get policy configuration details</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/configurations/{configurationId}")]
        public System.Threading.Tasks.Task<RequestStatus> ConfigurationsGet(string policyId, string configurationId)
        {
            return _implementation.ConfigurationsGetAsync(policyId, configurationId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IBusinessTimeController
    {
        /// <summary>Get policy business time</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<System.DateTimeOffset> BusinesstimeGetAsync(string policyId);
    
        /// <summary>Override policy business time</summary>
        /// <returns>Accepted</returns>
        System.Threading.Tasks.Task BusinesstimePostAsync(System.DateTimeOffset? body, string policyId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class BusinessTimeController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IBusinessTimeController _implementation;
    
        public BusinessTimeController(IBusinessTimeController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Get policy business time</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/businesstime")]
        public System.Threading.Tasks.Task<System.DateTimeOffset> BusinesstimeGet(string policyId)
        {
            return _implementation.BusinesstimeGetAsync(policyId);
        }
    
        /// <summary>Override policy business time</summary>
        /// <returns>Accepted</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/businesstime")]
        public System.Threading.Tasks.Task BusinesstimePost([Microsoft.AspNetCore.Mvc.FromBody] System.DateTimeOffset? body, string policyId)
        {
            return _implementation.BusinesstimePostAsync(body, policyId);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public interface IClaimsController
    {
        /// <summary>Get policy claims</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Claim>> ClaimGetAsync(string policyId);
    
        /// <summary>Submit policy claim</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task ClaimPostAsync(Claim body, string policyId);
    
        /// <summary>Get policy claim details</summary>
        /// <returns>OK</returns>
        System.Threading.Tasks.Task<Response> ClaimGetAsync(string policyId, string claimId);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.8.2.0 (NJsonSchema v10.2.1.0 (Newtonsoft.Json v12.0.0.0))")]
    public partial class ClaimsController : Microsoft.AspNetCore.Mvc.Controller
    {
        private IClaimsController _implementation;
    
        public ClaimsController(IClaimsController implementation)
        {
            _implementation = implementation;
        }
    
        /// <summary>Get policy claims</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/claim")]
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Claim>> ClaimGet(string policyId)
        {
            return _implementation.ClaimGetAsync(policyId);
        }
    
        /// <summary>Submit policy claim</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/claim")]
        public System.Threading.Tasks.Task ClaimPost([Microsoft.AspNetCore.Mvc.FromBody] Claim body, string policyId)
        {
            return _implementation.ClaimPostAsync(body, policyId);
        }
    
        /// <summary>Get policy claim details</summary>
        /// <returns>OK</returns>
        [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("policy/{policyId}/claim/{claimId}")]
        public System.Threading.Tasks.Task<Response> ClaimGet(string policyId, string claimId)
        {
            return _implementation.ClaimGetAsync(policyId, claimId);
        }
    
    }

    /// <summary>Status of a request sent  </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public enum RequestState
    {
        [System.Runtime.Serialization.EnumMember(Value = @"pending")]
        Pending = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"received")]
        Received = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"processing")]
        Processing = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"rejected")]
        Rejected = 4,
    
    }
    
    /// <summary>State of an insurance policy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class PolicyState 
    {
        [Newtonsoft.Json.JsonProperty("issued", Required = Newtonsoft.Json.Required.Always)]
        public bool Issued { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("issueDate", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.DateTimeOffset IssueDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("expiryDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? ExpiryDate { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isExpired", Required = Newtonsoft.Json.Required.Always)]
        public bool IsExpired { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Always)]
        public double Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("businessTime", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public string BusinessTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Duration of the policy, in seconds</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Duration 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Id { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A request to issue a policy at given time. </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class IssuanceRequest 
    {
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyId { get; set; }
    
        /// <summary>Time when policy should be issued. Can be null for immediate issue or a moment in the future
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? IssueTime { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class RequestStatus 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RequestState Status { get; set; }
    
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Configuration 
    {
        [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Amount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("duration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Duration Duration { get; set; }
    
        [Newtonsoft.Json.JsonProperty("policyId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PolicyId { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A claim filled towards a policy</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Claim 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int Amount { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous 
    {
        [Newtonsoft.Json.JsonProperty("issuance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuanceRequest Issuance { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Anonymous2 
    {
        [Newtonsoft.Json.JsonProperty("configurationRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Configuration ConfigurationRequest { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.2.1.0 (Newtonsoft.Json v12.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("claim", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Claim Claim { get; set; }
    
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RequestStatus Status { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108